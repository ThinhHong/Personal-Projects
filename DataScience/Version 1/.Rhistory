#Cleans data
data <- data %>%
clean_names() %>%
select(-starts_with("x")) %>%
select(-precinct_7,-overvotes,-undervotes,-times_cast) %>%
filter(precinct_1 != "City / Ville") %>%
filter(precinct_1 != "Ottawa") %>%
filter(!grepl('Adv',precinct_1))%>%
filter(!str_detect(precinct_1, "City / Ville - Total")) %>%
rename(precinct = precinct_1)
return (data)
}
# Function to get winner and runnerUp votes
GetWinnerResults <- function(ward) {
# gets the cleaned sheet data
sheet_data <- wardCleaner(str_c('Ward ', toString(ward)))
winner_results <- sheet_data %>%
select(-precinct) %>%
select(-total_votes) %>%
summarise_each(sum) %>%
# addts new colums
pivot_longer(
cols = everything(),
names_to = 'candidate',
values_to = 'votes'
) %>%
## summarise and gets total votes for winner and runner up
summarise(
winner = candidate[which.max(votes)],
total_votes = sum(votes),
votes_winner = max(votes)
) %>%
# adds fractions of votes for winner, runner up and how much the runner up won by
mutate(
fraction_of_votes = votes_winner / total_votes,
ward = ward
)
# Selects important columns for this hypothesis
winner_results <- winner_results %>%
select(ward, winner,votes_winner,total_votes,fraction_of_votes)
return(winner_results)
}
wardWinners <- tibble()
for (ward in 1:23) {
wardWinner <- GetWinnerResults(ward)
wardWinners<- bind_rows(wardWinners, wardWinner)
}
View(wardWinners)
wardinfo <- read_csv("ward_info_2011.csv")
wardinfo <- wardinfo %>%
select(area)
census <- read_csv("census_2016.csv")
View(census)
View(dataset)
View(wardinfo)
wardraction <- wardWinners %>%
mutate(turnout = dataset$turnout ),
wardfraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)
View(dataset)
dataset <- dataset[-c(1,2),]
dataset <- dataset %>%
select(-(...3))%>%
filter(!grepl('Adv',Precinct))%>%
clean_names() %>%
mutate(ward = as.numeric(str_sub(precinct, 0, 2)))%>%
group_by(ward) %>%
summarise(
registered_voters = sum(registered_voters),
cards_cast = sum(cards_cast)
) %>%
mutate(fraction_voted = cards_cast / registered_voters) %>%
na.omit()
dataset <- read_excel("statementofvotescastoctober242018.xls", sheet = "Summary",skip = 2)
# Cleaning dataset and getting the turnout rate
dataset <- dataset[-c(1,2),]
dataset <- dataset[-c(1,2),]
dataset <- dataset %>%
select(-(...3))%>%
filter(!grepl('Adv',Precinct))%>%
clean_names() %>%
mutate(ward = as.numeric(str_sub(precinct, 0, 2)))%>%
group_by(ward) %>%
summarise(
registered_voters = sum(registered_voters),
cards_cast = sum(cards_cast)
) %>%
mutate(fraction_voted = cards_cast / registered_voters) %>%
na.omit()
View(dataset)
wardfraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)
View(wardfraction)
wardfraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
mutate(area_type = cut(population_density,
breaks = quantile(wardFraction$areadensity,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardfraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardfraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
mutate(area_type = cut(population_density,
breaks = quantile(wardFraction$areadensity,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
View(wardFraction)
wardFraction <-wardFraction %>%
mutate(area_type = cut(population_density,
breaks = quantile(wardFraction$household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction <-wardFraction %>%
mutate(area_type = cut(population_density,
breaks = quantile(wardFraction$household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardFraction <-wardFraction %>%
mutate(area_type = cut(population_density,
breaks = quantile(wardFraction$household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = FALSE))
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardFraction <-wardFraction %>%
mutate(area = cut(population_density,
breaks = quantile(wardFraction$household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = FALSE))
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardFraction <-wardFraction %>%
mutate(area = cut(population_density,
breaks = quantile(wardFraction$household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardFraction <-wardFraction %>%
mutate(area = cut(population_density,
breaks = quantile(household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardFraction <-wardFraction %>%
mutate(area = cut(household_density,
breaks = quantile(household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction %>%
ggplot(aes(x = household_density,
y = fraction_of_votes,
color = area)) +
geom_point(size = 3) +
geom_smooth(se = FALSE, method = 'lm') +
facet_grid(rows = vars(area_type)) +
labs(
x = 'Average number of people per household',
y = 'Fraction of votes winner got / Total amount of votes in a ward',
color = 'Area',
title = 'Average household vs fraction of votes have'
)
wardFraction %>%
ggplot(aes(x = household_density,
y = fraction_of_votes,
color = area)) +
geom_point(size = 3) +
geom_smooth(se = FALSE, method = 'lm') +
facet_grid(rows = vars(area)) +
labs(
x = 'Average number of people per household',
y = 'Fraction of votes winner got / Total amount of votes in a ward',
color = 'Area',
title = 'Average household vs fraction of votes have'
)
dataset <- read_excel("statementofvotescastoctober242018.xls", sheet = "Summary",skip = 2)
# Cleaning dataset and getting the turnout rate
dataset <- dataset[-c(1,2),]
dataset <- dataset[-c(1,2),]
dataset <- dataset %>%
select(-(...3))%>%
filter(!grepl('Adv',Precinct))%>%
clean_names() %>%
mutate(ward = as.numeric(str_sub(precinct, 0, 2)))%>%
group_by(ward) %>%
summarise(
registered_voters = sum(registered_voters),
cards_cast = sum(cards_cast)
) %>%
mutate(fraction_voted = cards_cast / registered_voters) %>%
na.omit()
wardCleaner <- function(sheetNumber){
# reads datasheet
data <- read_excel("statementofvotescastoctober242018.xls", sheet = sheetNumber,skip = 2)
#Cleans data
data <- data %>%
clean_names() %>%
select(-starts_with("x")) %>%
select(-precinct_7,-overvotes,-undervotes,-times_cast) %>%
filter(precinct_1 != "City / Ville") %>%
filter(precinct_1 != "Ottawa") %>%
filter(!grepl('Adv',precinct_1))%>%
filter(!str_detect(precinct_1, "City / Ville - Total")) %>%
rename(precinct = precinct_1)
return (data)
}
# Function to get winner and runnerUp votes
GetWinnerResults <- function(ward) {
# gets the cleaned sheet data
sheet_data <- wardCleaner(str_c('Ward ', toString(ward)))
winner_results <- sheet_data %>%
select(-precinct) %>%
select(-total_votes) %>%
summarise_each(sum) %>%
# addts new colums
pivot_longer(
cols = everything(),
names_to = 'candidate',
values_to = 'votes'
) %>%
## summarise and gets total votes for winner and runner up
summarise(
winner = candidate[which.max(votes)],
total_votes = sum(votes),
votes_winner = max(votes)
) %>%
# adds fractions of votes for winner, runner up and how much the runner up won by
mutate(
fraction_of_votes = votes_winner / total_votes,
ward = ward
)
# Selects important columns for this hypothesis
winner_results <- winner_results %>%
select(ward, winner,votes_winner,total_votes,fraction_of_votes)
return(winner_results)
}
# Get the winner results for all wards
wardWinners <- tibble()
for (ward in 1:23) {
wardWinner <- GetWinnerResults(ward)
wardWinners<- bind_rows(wardWinners, wardWinner)
}
wardinfo <- read_csv("ward_info_2011.csv")
wardinfo <- wardinfo %>%
select(area)
census <- read_csv("census_2016.csv")
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardFraction <-wardFraction %>%
mutate(area = cut(household_density,
breaks = quantile(household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction %>%
ggplot(aes(x = household_density,
y = fraction_of_votes,
color = area)) +
geom_point(size = 3) +
geom_smooth(se = FALSE, method = 'lm') +
facet_grid(rows = vars(area)) +
labs(
x = 'Average number of people per household',
y = 'Fraction of votes winner got / Total amount of votes in a ward',
color = 'Area',
title = 'Average household vs fraction of votes have'
)
# load libraries
library(dplyr)
library(janitor)
library(ggplot2)
library(skimr)
library(tidyverse)
library(broom)
library(readxl)
rm(list = ls())
dataset <- read_excel("statementofvotescastoctober242018.xls", sheet = "Summary",skip = 2)
View(dataset)
dataset <- read_excel("statementofvotescastoctober242018.xls", sheet = "Summary",skip = 4)
dataset <- read_excel("statementofvotescastoctober242018.xls", sheet = "Summary",skip = 4) %>% na.omit()
# load libraries
library(dplyr)
library(janitor)
library(ggplot2)
library(skimr)
library(tidyverse)
library(broom)
library(readxl)
dataset <- read_excel("statementofvotescastoctober242018.xls", sheet = "Summary",skip = 4)
# Cleaning dataset and getting the turnout rate
dataset <- dataset[-c(1,2),]
dataset <- dataset %>%
select(-(...3))%>%
filter(!grepl('Adv',Precinct))%>%
clean_names() %>%
mutate(ward = as.numeric(str_sub(precinct, 0, 2)))%>%
group_by(ward) %>%
summarise(
registered_voters = sum(registered_voters),
cards_cast = sum(cards_cast)
) %>%
mutate(fraction_voted = cards_cast / registered_voters) %>%
na.omit()
wardCleaner <- function(sheetNumber){
# reads datasheet
data <- read_excel("statementofvotescastoctober242018.xls", sheet = sheetNumber,skip = 2)
#Cleans data
data <- data %>%
clean_names() %>%
select(-starts_with("x")) %>%
select(-precinct_7,-overvotes,-undervotes,-times_cast) %>%
filter(precinct_1 != "City / Ville") %>%
filter(precinct_1 != "Ottawa") %>%
filter(!grepl('Adv',precinct_1))%>%
filter(!str_detect(precinct_1, "City / Ville - Total")) %>%
rename(precinct = precinct_1)
return (data)
}
# Function to get winner and runnerUp votes
GetWinnerResults <- function(ward) {
# gets the cleaned sheet data
sheet_data <- wardCleaner(str_c('Ward ', toString(ward)))
winner_results <- sheet_data %>%
select(-precinct) %>%
select(-total_votes) %>%
summarise_each(sum) %>%
# addts new colums
pivot_longer(
cols = everything(),
names_to = 'candidate',
values_to = 'votes'
) %>%
## summarise and gets total votes for winner and runner up
summarise(
winner = candidate[which.max(votes)],
total_votes = sum(votes),
votes_winner = max(votes)
) %>%
# adds fractions of votes for winner, runner up and how much the runner up won by
mutate(
fraction_of_votes = votes_winner / total_votes,
ward = ward
)
# Selects important columns for this hypothesis
winner_results <- winner_results %>%
select(ward, winner,votes_winner,total_votes,fraction_of_votes)
return(winner_results)
}
# Get the winner results for all wards
wardWinners <- tibble()
for (ward in 1:23) {
wardWinner <- GetWinnerResults(ward)
wardWinners<- bind_rows(wardWinners, wardWinner)
}
wardinfo <- read_csv("ward_info_2011.csv")
wardinfo <- wardinfo %>%
select(area)
census <- read_csv("census_2016.csv")
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardFraction <-wardFraction %>%
mutate(area = cut(household_density,
breaks = quantile(household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction %>%
ggplot(aes(x = household_density,
y = fraction_of_votes,
color = area)) +
geom_point(size = 3) +
geom_smooth(se = FALSE, method = 'lm') +
facet_grid(rows = vars(area)) +
labs(
x = 'Average number of people per household',
y = 'Fraction of votes winner got / Total amount of votes in a ward',
color = 'Area',
title = 'Average household vs fraction of votes have'
)
dataset <- read_excel("statementofvotescastoctober242018.xls", sheet = "Summary",skip = 4)
# Cleaning dataset and getting the turnout rate
dataset <- dataset[-c(1,2),]
dataset <- dataset %>%
select(-(...3))%>%
filter(!grepl('Adv',Precinct))%>%
clean_names() %>%
mutate(ward = as.numeric(str_sub(precinct, 0, 2)))%>%
group_by(ward) %>%
summarise(
registered_voters = sum(registered_voters),
cards_cast = sum(cards_cast)
) %>%
mutate(fraction_voted = cards_cast / registered_voters) %>%
na.omit()
wardCleaner <- function(sheetNumber){
# reads datasheet
data <- read_excel("statementofvotescastoctober242018.xls", sheet = sheetNumber,skip = 2)
#Cleans data
data <- data %>%
clean_names() %>%
select(-starts_with("x")) %>%
select(-precinct_7,-overvotes,-undervotes,-times_cast) %>%
filter(precinct_1 != "City / Ville") %>%
filter(precinct_1 != "Ottawa") %>%
filter(!grepl('Adv',precinct_1))%>%
filter(!str_detect(precinct_1, "City / Ville - Total")) %>%
rename(precinct = precinct_1)
return (data)
}
# Function to get winner and runnerUp votes
GetWinnerResults <- function(ward) {
# gets the cleaned sheet data
sheet_data <- wardCleaner(str_c('Ward ', toString(ward)))
winner_results <- sheet_data %>%
select(-precinct) %>%
select(-total_votes) %>%
summarise_each(sum) %>%
# addts new colums
pivot_longer(
cols = everything(),
names_to = 'candidate',
values_to = 'votes'
) %>%
## summarise and gets total votes for winner and runner up
summarise(
winner = candidate[which.max(votes)],
total_votes = sum(votes),
votes_winner = max(votes)
) %>%
# adds fractions of votes for winner, runner up and how much the runner up won by
mutate(
fraction_of_votes = votes_winner / total_votes,
ward = ward
)
# Selects important columns for this hypothesis
winner_results <- winner_results %>%
select(ward, winner,votes_winner,total_votes,fraction_of_votes)
return(winner_results)
}
# Get the winner results for all wards
wardWinners <- tibble()
for (ward in 1:23) {
wardWinner <- GetWinnerResults(ward)
wardWinners<- bind_rows(wardWinners, wardWinner)
}
wardinfo <- read_csv("ward_info_2011.csv")
wardinfo <- wardinfo %>%
select(area)
census <- read_csv("census_2016.csv")
wardFraction <- wardWinners %>%
mutate(turnout = dataset$turnout) %>%
mutate(population_density = census$Population/wardinfo$area)%>%
mutate(household_density = census$Population/census$Households)
wardFraction <-wardFraction %>%
mutate(area = cut(household_density,
breaks = quantile(household_density,
probs = c(0, 1/3, 2/3, 1)),
labels = c('urban', 'suburban', 'rural'),
include.lowest = TRUE))
wardFraction %>%
ggplot(aes(x = household_density,
y = fraction_of_votes,
color = area)) +
geom_point(size = 3) +
geom_smooth(se = FALSE, method = 'lm') +
facet_grid(rows = vars(area)) +
labs(
x = 'Average number of people per household',
y = 'Fraction of votes winner got / Total amount of votes in a ward',
color = 'Area',
title = 'Average household vs fraction of votes have'
)
View(wardFraction)
