{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 //Assumptions:\
//1.Each race must consist of at least two teams, and since few\
//is not specified, the association is 2..*\
//2.Each route must consist of at least 2 teams.\
//3.Each leg is associated to only one route.\
//4.Teams start in the order of their given team numbers\
//5.Each leg has its own penalties.\
\
class Race\{\
  \
  Integer raceNumber;\
  winner;\
  Boolean hasStarted;\
  1..* -- 1 Route;\
  //1 -- 2..* Team; if association class was not there.\
  \
  void selectRoute(Route r)\{//selects the route for the race\
    route = r;\
  \}\
  \
  void winner()\{\
    System.out.println("The winner of the " + raceNumber + " Spartan Race is team " + winner + ".");\
  \}\
  \
  \
\}\
\
class Team\{\
\
  Integer teamNumber;\
  teamName;\
  Boolean stillParticipating;\
  1 -- 4 TeamMember;\
  \
  void quit()\{\
    stillParticipating = false;\
  \}\
  \
  void isDisqualified()\{\
    for (int i = 0; i < arrayfLegTimes.size();i++)\{\
      if (arrayOfLegTimes.get(i).getDisqualified()) stillParticipating = false;\
    \}\
  \}\
  \
  int sumOfTotalTimes()\{\
    int total = 0;\
    \
    for(int i = 0; i < arrayOfLegTimes.size();i++)\{\
      total += arrayOfLegTimes.get(i).getTotalTime();\
    \}\
    return total;\
  \}\
  \
  int sumOfPenaltyTimes()\{\
    int total = 0;\
    \
    for(int i = 0; i < arrayOfLegTimes.size();i++)\{\
      total += arrayOfLegTimes.get(i).getPenaltyTime();\
    \}\
    return total;\
  \}\
  \
  int addTotal()\{\
    totalTime = sumOfTotalTimes() + sumOfTotalPenalties();\
  \}\
\}\
\
class TeamMember\{\
  firstName;\
  lastName;\
  Integer age = 0;\
  sex;\
\}\
\
class Route\{\
  routeLocation;\
  routeName;\
\}\
\
class  Leg\{\
  Calander startTime =  Calander.getInstance();//using getTime()\
  startLocation;\
  endLocation;\
  String[] usedSkills;\
  legName;\
  //4..5 -- 1 Route; If the association class wasn't there\
  * -> 1..* Skill;\
  4..5 -- 2..* Team;\
\}\
\
class Skill\{\
  skill;\
\}\
\
associationClass BestTime\{//Association class between Route and Leg\
//****************************************************************\
//(Unlike on paper can't use just the dotted line\
//If there is a mistake, the association is as followed:\
//for every route there are 4 or 5 legs\
//each leg belongs only to one route.\
  1 Route;\
  4..5 Leg;\
  bestTime;\
\}\
\
class LegTime\{\
  \
  Date startTime;\
  Integer endTime;//In seconds\
  Integer totalTime = 0;\
  Boolean isDisqualified = false;\
  Integer penaltyTime = 0;\
  \
  * -- 4..5 Leg;\
  4..5 -- 2..* Team;\
  * -> * Penalty;\
  \
  void Start()\{//gets start time for each team\
    startTime = new Date(legs.get(0).getStartTime().getTimeInMillis() + (600000 * (teams.get(0).getTeamNumber()-1)));\
  \}\
  \
  void end()\{\
    Calander date = Calander.getInstance();\
    long begin = ((Calander)getStartTime()).getTimeInMillis();\
    long end = ((Calander)date).getTimeInMillis();\
    endTime = (int)((end-begin)/100);\
  \}\
  \
  void addPenaltyTime(Penalty p)\{\
    \
    penaltyTime += p.getPenaltyTime();\
    if (p.disqualify()) isDisqualified = true; \
  \}\
\}\
\
associationClass OverallTime\{//Association class between Race and Team\
//****************************************************************\
//(Unlike on paper can't use just the dotted line\
//If there is a mistake, the association is as followed:\
//every team participates in one race\
//each race consistof 2 or more teams.\
  \
  Integer totalTime = team.addTotal();\
  2..* Team;\
  1 Race;\
  \
\}\
\
class Penalty\{\
  penaltyName;\
  Integer penaltyTime = 0;\
  \
  Boolean disqualify()  \
  \{  \
    return(true);  \
  \}  \
\}\
}